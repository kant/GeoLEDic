import sys
import programs
from string import Template


FACTORY_TEMPLATE = '''
// autogenerated by $scriptname

// prune some stupid FastLED dependencies
#define __INC_PLATFORMS_H
#define HAS_HARDWARE_PIN_SUPPORT

#include "ProgramFactory.hpp"
#include "programs/Diagnostic.hpp"

$includes

ProgramFactory::ProgramFactory(const DomeWrapper& dome, const Strips& strips):
      m_dome(dome),
      m_strips(strips),
      m_current_program(nullptr)
{
}

Program* ProgramFactory::changeProgram(uint8_t program)
{
   delete m_current_program;
   switch (program)
   {
$cases
   default:
      m_current_program = new Diagnostic(m_dome, m_strips);
   }
   return m_current_program;
}

ProgramFactory::~ProgramFactory()
{
   delete m_current_program;
}

'''

CASE_TEMPLATE = '''
   case $num:
      m_current_program = new $program(m_dome);
      break;

'''

filename = sys.argv[1]
includes = ''
cases = ''

program_number = 0
for program in programs.get():
    includes += '#include "programs/%s.hpp"\n' % program['program']
    cases += Template(CASE_TEMPLATE).substitute(
        num=program_number, 
        program=program['program'])
    program_number += 1

with open(filename, 'w') as file:
    file.write(Template(FACTORY_TEMPLATE).substitute(
        scriptname=sys.argv[0],
        includes=includes,
        cases=cases))
