R"(#version 330 core
out vec4 FragColor;

in vec3 FragPos;

#define NUM_LEDS 500

uniform vec3 led_pos[NUM_LEDS];
uniform vec3 led_color[NUM_LEDS];
uniform int num_leds;
uniform float cutoff_distance_square;
uniform float attenuation_constant;
uniform float attenuation_linear;
uniform float attenuation_square;
uniform vec3 direction;
uniform vec3 normal;

void main()
{
   if (gl_FrontFacing && num_leds > 0)
   {
       float directional = (1 + max(dot(normal, direction), 0.0))/2;
       vec3 diffuse = vec3(0.0);
       for (int i = 0; i < num_leds; i++)
       {
          vec3 diff = led_pos[i] - FragPos;
          float distance_square = dot(diff, diff);
          if (distance_square < cutoff_distance_square)
          {
             float distance = sqrt(distance_square);
             float attenuation = attenuation_constant + attenuation_linear*distance + attenuation_square*distance_square;
             diffuse += led_color[i] / attenuation;
          }
       }
       FragColor = vec4(diffuse, 1.0) * directional;
   }
   else
   {
     float directional = max(dot(-normal, direction), 0.0);
     FragColor = vec4(0.3, 0.3, 0.3, 1) * directional;
   }
}

)"
